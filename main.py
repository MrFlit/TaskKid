import asyncio
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, CallbackQuery, InputFile
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardMarkup, KeyboardButton
import logging
import re
from dotenv import load_dotenv
import os
logging.basicConfig(level=logging.INFO)
load_dotenv()

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ü–∞–º—è—Ç—å
users = {}  # user_id: {"role": "parent"/"child", "points": int, "history": [], "parent_id": int}
tasks = {}  # task_id: {"title": str, "points": int}
task_counter = 0
pending_tasks = {}  # parent_id: [{"child_id", "task_id", "photo_id"}]
children_by_parent = {}  # parent_id: set(child_ids)
# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è/—Å–ø–∏—Å–∞–Ω–∏—è
adjusting = {}  # parent_id: {"child_id": int, "action": "add"/"remove"}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu(role):
    if role == "parent":
        return ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")],
            [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–±—ë–Ω–∫–∞")],
            [KeyboardButton(text="üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å/–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã")]
        ], resize_keyboard=True)
    elif role == "child":
        return ReplyKeyboardMarkup(keyboard=[
            [KeyboardButton(text="üìã –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")],
            [KeyboardButton(text="üìà –ú–æ–∏ –±–∞–ª–ª—ã")]
        ], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: Message):
    user_id = message.from_user.id
    if user_id in users:
        return await message.answer("–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å.")
    await message.answer("–ö—Ç–æ –≤—ã?", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë® –†–æ–¥–∏—Ç–µ–ª—å")],
            [KeyboardButton(text="üßí –†–µ–±—ë–Ω–æ–∫")]
        ], resize_keyboard=True
    ))

@dp.message(Command("newroll"))
async def new_roll(message: Message):
    users.pop(message.from_user.id, None)
    await start(message)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–ª–µ–π
@dp.message(F.text == "üë® –†–æ–¥–∏—Ç–µ–ª—å")
async def set_parent(message: Message):
    users[message.from_user.id] = {"role": "parent"}
    children_by_parent[message.from_user.id] = set()
    await message.answer(
        f"–í—ã –†–æ–¥–∏—Ç–µ–ª—å. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í–∞—à Telegram ID: `{message.from_user.id}`\n"
        f"–ü–µ—Ä–µ–¥–∞–π—Ç–µ —ç—Ç–æ—Ç ID –≤–∞—à–µ–º—É —Ä–µ–±—ë–Ω–∫—É, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–∞–º.",
        reply_markup=main_menu("parent"),
        parse_mode="Markdown"
    )

@dp.message(F.text == "üßí –†–µ–±—ë–Ω–æ–∫")
async def set_child(message: Message):
    if message.from_user.id in users:
        return
    users[message.from_user.id] = {"role": "child", "points": 0, "history": [], "parent_id": None}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –†–æ–¥–∏—Ç–µ–ª—è (–µ–≥–æ Telegram ID):")

@dp.message(lambda m: users.get(m.from_user.id, {}).get("role") == "child" and users[m.from_user.id].get("parent_id") is None and m.text.isdigit())
async def set_child_parent(message: Message):
    parent_id = int(message.text)
    if parent_id in users and users[parent_id]["role"] == "parent":
        users[message.from_user.id]["parent_id"] = parent_id
        children_by_parent[parent_id].add(message.from_user.id)
        await message.answer("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –†–æ–¥–∏—Ç–µ–ª—é!", reply_markup=main_menu("child"))

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –†–æ–¥–∏—Ç–µ–ª—é
        child_name = message.from_user.first_name
        await bot.send_message(parent_id, f"üßí –†–µ–±—ë–Ω–æ–∫ {child_name} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≤–∞–º!")
    else:
        await message.answer("–†–æ–¥–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def add_task_prompt(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ (–ë–∞–ª–ª—ã)\n–ü—Ä–∏–º–µ—Ä: –ü–æ–º—ã—Ç—å –ø–æ—Å—É–¥—É (10)")

@dp.message(lambda m: users.get(m.from_user.id, {}).get("role") == "parent" and "(" in m.text and ")" in m.text)
async def add_task(message: Message):
    global task_counter
    match = re.match(r"(.+)\((\d+)\)", message.text.strip())
    if match:
        title = match.group(1).strip()
        points = int(match.group(2))
        tasks[task_counter] = {"title": title, "points": points}
        await message.answer(f"–ó–∞–¥–∞–Ω–∏–µ \"{title}\" (+{points}) –¥–æ–±–∞–≤–ª–µ–Ω–æ")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏
        parent_name = message.from_user.username or message.from_user.first_name
        await bot.send_message(
            ADMIN_ID,
            f"üìå –†–æ–¥–∏—Ç–µ–ª—å @{parent_name} —Å–æ–∑–¥–∞–ª –∑–∞–¥–∞–Ω–∏–µ:\n\"{title}\" (+{points} –±–∞–ª–ª–æ–≤)"
        )
        task_counter += 1

# –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def delete_task_prompt(message: Message):
    builder = InlineKeyboardBuilder()
    for task_id, task in tasks.items():
        builder.button(text=task["title"], callback_data=f"del_{task_id}")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("del_"))
async def delete_task(call: CallbackQuery):
    task_id = int(call.data.split("_")[1])
    title = tasks[task_id]["title"]
    tasks.pop(task_id)
    await call.message.edit_text(f"–ó–∞–¥–∞–Ω–∏–µ \"{title}\" —É–¥–∞–ª–µ–Ω–æ.")

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (—Ä–µ–±—ë–Ω–æ–∫)
@dp.message(F.text == "üìã –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ")
async def show_tasks_to_child(message: Message):
    if not tasks:
        return await message.answer("üïì –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –†–æ–¥–∏—Ç–µ–ª—è –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö.")

    builder = InlineKeyboardBuilder()
    for task_id, task in tasks.items():
        builder.button(
            text=f"{task['title']} (+{task['points']})",
            callback_data=f"take_{task_id}"
        )
    builder.adjust(1)  # 1 –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=builder.as_markup())

# –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–¥–∞–Ω–∏—è —Ä–µ–±—ë–Ω–∫–æ–º
@dp.callback_query(F.data.startswith("take_"))
async def child_take_task(call: CallbackQuery):
    task_id = int(call.data.split("_")[1])
    task = tasks[task_id]
    pending_tasks[call.from_user.id] = {"task_id": task_id}
    await call.message.answer(f"üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n{task['title']}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –æ—Ç —Ä–µ–±—ë–Ω–∫–∞
# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è (—Ä–µ–±—ë–Ω–æ–∫) ‚Äî –∏–∑–º–µ–Ω–∏–º, —á—Ç–æ–±—ã –∑–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª—è–ª–æ—Å—å
@dp.message(F.photo)
async def handle_task_photo(message: Message):
    user_id = message.from_user.id
    if user_id not in pending_tasks:
        return await message.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

    photo_id = message.photo[-1].file_id
    pending_tasks[user_id]["photo_file_id"] = photo_id

    parent_id = users[user_id]["parent_id"]
    if not parent_id:
        return await message.answer("–†–æ–¥–∏—Ç–µ–ª—å –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è.")

    task_id = pending_tasks[user_id]["task_id"]
    task = tasks[task_id]

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É
    await bot.send_photo(
        ADMIN_ID,
        photo=photo_id,
        caption=f"üõ° –§–æ—Ç–æ –æ—Ç —Ä–µ–±—ë–Ω–∫–∞ @{message.from_user.username or message.from_user.first_name}\n"
                f"–ó–∞–¥–∞–Ω–∏–µ: {task['title']} (+{task['points']})",
        parse_mode="Markdown"
    )

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{user_id}_{task_id}")
    builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
    await bot.send_photo(parent_id, photo=photo_id,
                         caption=f"üßí –†–µ–±—ë–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞–Ω–∏—é:\n*{task['title']}* (+{task['points']})",
                         parse_mode="Markdown",
                         reply_markup=builder.as_markup())

    # –£–±–∏—Ä–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    # –ù–µ —É–¥–∞–ª—è–µ–º –∑–¥–µ—Å—å! –¢–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ pending_tasks
    pending_tasks[user_id] = {
        "task_id": task_id,
        "photo_file_id": photo_id
    }

    await message.answer("üì§ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –†–æ–¥–∏—Ç–µ–ª—é –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –†–æ–¥–∏—Ç–µ–ª–µ–º
@dp.callback_query(F.data.startswith("accept_"))
async def accept_task(call: CallbackQuery):
    _, child_id, task_id = call.data.split("_")
    child_id = int(child_id)
    task_id = int(task_id)
    task = tasks[task_id]
    task = tasks.pop(task_id, None)  # –£–¥–∞–ª—è–µ–º –∑–¥–µ—Å—å
    if not task:
        return await call.message.answer("–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.")

    users[child_id]["points"] += task["points"]
    users[child_id]["history"].append(f"{task['title']} (+{task['points']})")
    await bot.send_message(child_id, f"‚úÖ –†–æ–¥–∏—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–¥–∞–Ω–∏–µ: {task['title']}\n+{task['points']} –±–∞–ª–ª–æ–≤!")
    await call.message.edit_caption(f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –£ —Ä–µ–±—ë–Ω–∫–∞ —Ç–µ–ø–µ—Ä—å {users[child_id]['points']} –±–∞–ª–ª–æ–≤.")
    pending_tasks.pop(child_id, None)

@dp.callback_query(F.data.startswith("reject_"))
async def reject_task(call: CallbackQuery):
    child_id = int(call.data.split("_")[1])
    await bot.send_message(child_id, "‚ùå –†–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è.")
    await call.message.edit_caption("‚ùå –ó–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    pending_tasks.pop(child_id, None)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–±—ë–Ω–∫–∞
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–±—ë–Ω–∫–∞")
async def stats_prompt(message: Message):
    builder = InlineKeyboardBuilder()
    for child_id in children_by_parent.get(message.from_user.id, []):
        name = (await bot.get_chat(child_id)).first_name
        builder.button(text=f"{name} ({child_id})", callback_data=f"stat_{child_id}")
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±—ë–Ω–∫–∞:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("stat_"))
async def show_stat(call: CallbackQuery):
    child_id = int(call.data.split("_")[1])
    user = users.get(child_id)
    history = "\n".join(user["history"][-10:]) or "–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."
    await call.message.edit_text(f"–ë–∞–ª–ª—ã: {user['points']}\n–ò—Å—Ç–æ—Ä–∏—è:\n{history}")

# –ë–∞–ª–ª—ã –≤—Ä—É—á–Ω—É—é
@dp.message(F.text == "üí∞ –ù–∞—á–∏—Å–ª–∏—Ç—å/–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã")
async def adjust_start(message: Message):
    builder = InlineKeyboardBuilder()
    for child_id in children_by_parent.get(message.from_user.id, []):
        name = (await bot.get_chat(child_id)).first_name
        builder.button(text=f"{name} ({child_id})", callback_data=f"adjchild_{child_id}")
    builder.adjust(1)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±—ë–Ω–∫–∞:", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("adjchild_"))
async def choose_adjust_action(call: CallbackQuery):
    child_id = int(call.data.split("_")[1])
    adjusting[call.from_user.id] = {"child_id": child_id}

    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å", callback_data="adjact_add")
    builder.button(text="‚ûñ –°–ø–∏—Å–∞—Ç—å", callback_data="adjact_remove")
    builder.adjust(2)
    await call.message.edit_text("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=builder.as_markup())

@dp.callback_query(F.data.startswith("adjact_"))
async def ask_adjust_amount(call: CallbackQuery):
    action = call.data.split("_")[1]
    adjusting[call.from_user.id]["action"] = action
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")

@dp.message(lambda m: m.from_user.id in adjusting and m.text.isdigit())
async def apply_adjust(message: Message):
    info = adjusting.pop(message.from_user.id)
    child_id = info["child_id"]
    action = info["action"]
    amount = int(message.text)

    if child_id not in users:
        return await message.answer("–†–µ–±—ë–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    if action == "add":
        users[child_id]["points"] += amount
        await message.answer(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {amount} –±–∞–ª–ª–æ–≤.\n–¢–µ–ø–µ—Ä—å —É —Ä–µ–±—ë–Ω–∫–∞ {users[child_id]['points']} –±–∞–ª–ª–æ–≤.")
        await bot.send_message(child_id,
                               f"üü¢ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount} –±–∞–ª–ª–æ–≤!\n–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {users[child_id]['points']} –±–∞–ª–ª–æ–≤.")
    else:
        users[child_id]["points"] = max(0, users[child_id]["points"] - amount)
        await message.answer(f"‚ùå –°–ø–∏—Å–∞–Ω–æ {amount} –±–∞–ª–ª–æ–≤.\n–¢–µ–ø–µ—Ä—å —É —Ä–µ–±—ë–Ω–∫–∞ {users[child_id]['points']} –±–∞–ª–ª–æ–≤.")
        await bot.send_message(child_id,
                               f"üî¥ –£ –≤–∞—Å —Å–ø–∏—Å–∞–ª–∏ {amount} –±–∞–ª–ª–æ–≤.\n–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {users[child_id]['points']} –±–∞–ª–ª–æ–≤.")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–±—ë–Ω–∫–∞
@dp.message(F.text == "üìà –ú–æ–∏ –±–∞–ª–ª—ã")
async def my_points(message: Message):
    user = users[message.from_user.id]
    history = "\n".join(user["history"][-10:]) or "–ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."
    await message.answer(f"‚ú® –£ –≤–∞—Å {user['points']}\n–ò—Å—Ç–æ—Ä–∏—è:\n{history}")

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
